import datatypes from "domain.data" as Domain
import microservices from "../Charging-Station-Sharing-Microservice-Command/chargingStationSharingCommand.services" as ChargingStationSharingCommand
import technology from "../Technology/technology/Spring.technology" as Spring
import technology from "../Technology/technology/Java.technology" as Java
import technology from "../Technology/technology/Cqrs.technology" as CQRS
import technology from "../Technology/technology/Kafka.technology" as Kafka

@technology(Java)
@technology(Spring)
@technology(CQRS)
@technology(Kafka)
@endpoints(Kafka::_protocols.kafka:"kafka-server1:9092";)
@Kafka::_aspects.BootstrapAddress("kafka-server1:9092")
@CQRS::_aspects.QuerySide("ChargingStationSearchMicroservice")
@Spring::_aspects.Application(name="ChargingStationSearchMicroservice", port=8051)
@Spring::_aspects.DatasourceConfiguration(databaseTechnology="MongoDB")
@Spring::_aspects.EnableServiceDiscovery(discoveryTechnology="Eureka")
functional microservice de.fhdo.puls.chargingstationsearchmanagement.ChargingStationSearchManagement {

	required microservices {
		ChargingStationSharingCommand::de.fhdo.puls.chargingstationsharingcommand.ChargingStationSharingCommand
	}

	@endpoints(Spring::_protocols.rest: "/resources/v1";)
	interface MapSearchController {


		@endpoints(Spring::_protocols.rest: "/locationData";)
		@Spring::_aspects.PutMapping
		public savePatientData(
			@Spring::_aspects.RequestBody
			sync in locationDataDto : Domain::ChargingStationSearch.LocationDataDto,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtoResponse : Domain::ChargingStationSearch.LocationDataDto
		);


		@endpoints(Spring::_protocols.rest: "/locationData";)
		@Spring::_aspects.PostMapping
		public updateQuestionnaireData(
			@Spring::_aspects.RequestBody
			sync in locationDataDto : Domain::ChargingStationSearch.LocationDataDto,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtoResponse : Domain::ChargingStationSearch.LocationDataDto
		);


		@endpoints(Spring::_protocols.rest: "/locationData/{locationDataId}";)
		@Spring::_aspects.GetMapping
		public getLocationData(
			@Spring::_aspects.PathVariable
			sync in locationDataId : string,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtoResponse : Domain::ChargingStationSearch.LocationDataDto
		);


		@endpoints(Spring::_protocols.rest: "/locationData";)
		@Spring::_aspects.GetMapping
		public getAllLocationData(
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtos : Domain::ChargingStationSearch.LocationDataDtos
		);


		@endpoints(Spring::_protocols.rest: "/locationData/findByAddress";)
		@Spring::_aspects.GetMapping
		public getAllLocationDataByAddressLike(
			@Spring::_aspects.RequestParam(value="q")
			sync in addressSearchString : string,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtos : Domain::ChargingStationSearch.LocationDataDtos
		);


		@endpoints(Spring::_protocols.rest: "/locationData/findByAddressFiltered";)
		@Spring::_aspects.GetMapping
		public getAllLocationDataByAddressLikeAndExtFilterLike(
			@Spring::_aspects.RequestParam(value="q")
			sync in addressSearchString : string,
			@Spring::_aspects.RequestParam(value = "filter")
			sync in filter: string,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtos : Domain::ChargingStationSearch.LocationDataDtos
		);


		@endpoints(Spring::_protocols.rest: "/locationData/findWithin";)
		@Spring::_aspects.GetMapping
		public getAllLocationDataWithin(
			@Spring::_aspects.RequestParam(value="lat")
			sync in lat : string,
			@Spring::_aspects.RequestParam(value="lng")
			sync in lng : string,
			@Spring::_aspects.RequestParam(value="radius")
			sync in radius : double,
			@Spring::_aspects.RequestParam(value="metric")
			sync in metric : string,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtos : Domain::ChargingStationSearch.LocationDataDtos
		);


		@endpoints(Spring::_protocols.rest: "/locationData/findNear";)
		@Spring::_aspects.GetMapping
		public getAllLocationDataNear(
			@Spring::_aspects.RequestParam(value="lat")
			sync in lat : string,
			@Spring::_aspects.RequestParam(value="lng")
			sync in lng : string,
			@Spring::_aspects.RequestParam(value="radius")
			sync in radius : double,
			@Spring::_aspects.RequestParam(value="metric")
			sync in metric : string,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtos : Domain::ChargingStationSearch.LocationDataDtos
		);


		@endpoints(Spring::_protocols.rest: "/locationData/findNearFiltered";)
		@Spring::_aspects.GetMapping
		public getAllLocationDataNearAndExtFilter(
			@Spring::_aspects.RequestParam(value="lat")
			sync in lat : string,
			@Spring::_aspects.RequestParam(value="lng")
			sync in lng : string,
			@Spring::_aspects.RequestParam(value="radius")
			sync in radius : double,
			@Spring::_aspects.RequestParam(value="metric")
			sync in metric : string,
			@Spring::_aspects.RequestParam(value="filter")
			sync in filter : string,
			@Spring::_aspects.ResponseEntity
			sync out locationDataDtos : Domain::ChargingStationSearch.LocationDataDtos
		);


		@endpoints(Spring::_protocols.rest: "/locationData/exists/{locationDataId}";)
		@Spring::_aspects.GetMapping
		public existsPatientData(
			@Spring::_aspects.PathVariable(value="locationDataId")
			sync in locationDataId : string,
			sync out exists : boolean
		);


		@endpoints(Spring::_protocols.rest: "/locationData/{locationDataId}";)
		@Spring::_aspects.DeleteMapping
		public deletePatientData(
			@Spring::_aspects.PathVariable(value="locationDataId")
			sync in locationDataId : string
		);

		//Events from Charging-Station-Sharing-Microservice-Command
		@Kafka::_aspects.Participant(
			topic="parkingSpaceOfferedEvents",
			consumerGroup="parkingSpaceOfferedEvents"
		)
		receiveParkingSpaceOfferedEvents(
			async event : Domain::ChargingStationSearch.ParkingSpaceOffered
		);

		@Kafka::_aspects.Participant(
			topic="parkingSpaceWithdrawedEvents",
			consumerGroup="parkingSpaceWithdrawedEvents"
		)
		receiveParkingSpaceWithdrawedEvents(
			async event : Domain::ChargingStationSearch.OfferedParkingSpaceWithdrawed
		);

		@Kafka::_aspects.Participant(
			topic="electrifiedParkingSpaceOfferedEvents",
			consumerGroup="electrifiedParkingSpaceOfferedEvents"
		)
		receiveElectrifiedParkingSpaceOfferedEvents(
			async event : Domain::ChargingStationSearch.ElectrifiedParkingSpaceOffered
		);

		@Kafka::_aspects.Participant(
			topic="electrifiedParkingSpaceWithdrawedEvents",
			consumerGroup="electrifiedParkingSpaceWithdrawedEvents"
		)
		receiveElectrifiedParkingSpaceWithdrawedEvents(
			async event : Domain::ChargingStationSearch.OfferedElectrifiedParkingSpaceWithdrawed
		);
	}
}