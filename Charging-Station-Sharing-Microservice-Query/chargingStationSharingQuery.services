import datatypes from "domain.data" as Domain
import microservices from "../Charging-Station-Sharing-Microservice-Command/chargingStationSharingCommand.services" as ChargingStationSharingServiceCommand
import technology from "../Technology/technology/Spring.technology" as Spring
import technology from "../Technology/technology/Java.technology" as Java
import technology from "../Technology/technology/Kafka.technology" as Kafka
import technology from "../Technology/technology/Cqrs.technology" as CQRS

@technology(Java)
@technology(Spring)
@technology(Kafka)
@technology(CQRS)
@endpoints(Kafka::_protocols.kafka:"kafka-server1:9092";)
@Kafka::_aspects.BootstrapAddress("kafka-server1:9092")
@CQRS::_aspects.QuerySide("ChargingStationSharingMicroservice")
@Spring::_aspects.Application(name="ChargingStationSharingtMicroserviceQuery", port=8042)
@Spring::_aspects.DatasourceConfiguration(databaseTechnology="MongoDB")
@Spring::_aspects.EnableServiceDiscovery(discoveryTechnology="Eureka")
functional microservice  de.fhdo.puls.chargingstationsharingquery.ChargingStationSharingQuery {

	required microservices {
		ChargingStationSharingServiceCommand::de.fhdo.puls.chargingstationsharingcommand.ChargingStationSharingCommand
	}

	@endpoints(Spring::_protocols.rest: "/resources/v1";)
	interface ParkingSpaceSharingQueries {

		@endpoints(Spring::_protocols.rest: "/parkingSpaceSharing/id/{id}";)
		@Spring::_aspects.GetMapping
		public isParkingSpaceOffered(
			@Spring::_aspects.PathVariable(value="id")
			sync in id : string,
			sync out offered : boolean
		);

		@Kafka::_aspects.Participant(
			topic="parkingSpaceOfferedEvents",
			consumerGroup="parkingSpaceOfferedEvents"
		)
		receiveParkingSpaceOfferedEvents(
			async event : Domain::ChargingStationSharing.ParkingSpaceOffered
		);

		@Kafka::_aspects.Participant(
			topic="parkingSpaceWithdrawedEvents",
			consumerGroup="parkingSpaceWithdrawedEvents"
		)
		receiveParkingSpaceWithdrawedEvents(
			async event : Domain::ChargingStationSharing.OfferedParkingSpaceWithdrawed
		);
	}

	@endpoints(Spring::_protocols.rest: "/resources/v1";)
	interface ElectrifiedParkingSpaceSharingQueries {

		@endpoints(Spring::_protocols.rest: "/electrifiedParkingSpaceSharing/id/{id}";)
		@Spring::_aspects.GetMapping
		public isElectrifiedParkingSpaceOffered(
			@Spring::_aspects.PathVariable(value="id")
			sync in id : string,
			sync out offered : boolean
		);

		@Kafka::_aspects.Participant(
			topic="electrifiedParkingSpaceOfferedEvents",
			consumerGroup="electrifiedParkingSpaceOfferedEvents"
		)
		receiveElectrifiedParkingSpaceOfferedEvents(
			async event : Domain::ChargingStationSharing.ElectrifiedParkingSpaceOffered
		);

		@Kafka::_aspects.Participant(
			topic="electrifiedParkingSpaceWithdrawedEvents",
			consumerGroup="electrifiedParkingSpaceWithdrawedEvents"
		)
		receiveElectrifiedParkingSpaceWithdrawedEvents(
			async event : Domain::ChargingStationSharing.OfferedElectrifiedParkingSpaceWithdrawed
		);
	}
}